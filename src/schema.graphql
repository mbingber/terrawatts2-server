type Query {
  getGame(id: ID!): Game
  getCityCostHelper(mapName: String!, regions: [Int!]!): String!
  fetchMap(mapName: String!, regions: [Int]): PopulatedMap!
  getRevenues: [Int!]!
}

type Mutation {
  createGame(usernames: [String!]!, mapName: String!): Game!
  putUpPlant(gameId: ID!, meId: ID!, plantInstanceId: ID, bid: Int): Game!
  bidOnPlant(gameId: ID!, meId: ID!, bid: Int): Game!
  discardPlant(gameId: ID!, meId: ID!, plantInstanceId: ID!, fossilFuelDiscard: HybridChoiceInput): Game!
  buyResources(gameId: ID!, meId: ID!, resources: ResourcesInput!, cost: Int!): Game!
  buyCities(gameId: ID!, meId: ID!, cityInstanceIds: [ID!]!, cost: Int!): Game!
  powerUp(gameId: ID!, meId: ID!, plantInstanceIds: [ID!]!, hybridChoice: HybridChoiceInput): Game!
  createUser(username: String!, preferredColor: Color): User
  setPlayer(playerId: ID!, resources: ResourcesInput, money: Int): Player
}

type Subscription {
  gameUpdated(id: ID!): Game
}

type Game {
  id: ID!
  map: Map!
  regions: [Int!]!
  turn: Int!
  era: Int!
  phase: Phase!
  actionType: ActionType!
  playerOrder: [Player!]!
  activePlayer: Player!
  plantMarket: [PlantInstance!]!
  plants: [PlantInstance!]!
  plantPhaseEvents: [PlantPhaseEvent!]!
  deckCount: Int!
  cities: [CityInstance!]!
  resourceMarket: Resources!
  auction: Auction
  restockRates: RestockRates!
  plantRankBought: Int!
  version: Int!
}

type PlantPhaseEvent {
  id: ID!
  turn: Int!
  player: Player!
  plant: PlantInstance
}

type Map {
  id: ID!
  name: String!
}

type PopulatedMap {
  id: ID!
  name: String!
  cities: [City!]!
  connections: [Connection!]!
}

type Player {
  id: ID!
  clockwiseOrder: Int!
  user: User!
  color: Color!
  money: Int!
  resources: Resources!
  plants: [PlantInstance!]!
}

type User {
  id: ID!
  username: String!
  preferredColor: Color
}

type PlantInstance {
  id: ID!
  plant: Plant!
  status: PlantStatus!
}

type Plant {
  id: ID!
  rank: Int!
  resourceType: PlantResourceType!
  resourceBurn: Int!
  numCities: Int!
}

type Resources {
  coal: Int!
  oil: Int!
  trash: Int!
  uranium: Int!
}

type CityInstance {
  id: ID!
  city: City!
  players: [Player!]
}

type City {
  id: ID!
  name: String!
  lat: Float!
  lng: Float!
  region: Int!
  map: Map!
}

type Connection {
  id: ID!
  cost: Int!
  cities: [City!]!
}

type Auction {
  id: ID!
  plant: PlantInstance!
  bid: Int!
  leadingPlayer: Player!
  activePlayer: Player!
  passedPlayers: [Player!]
}

type RestockRates {
  era1: Resources!
  era2: Resources!
  era3: Resources!
}

input ResourcesInput {
  coal: Int
  oil: Int
  trash: Int
  uranium: Int
}

input HybridChoiceInput {
  coal: Int!
  oil: Int!
}

enum Phase {
  PLANT
  RESOURCE
  CITY
  POWER
}

enum ActionType {
  PUT_UP_PLANT
  DISCARD_PLANT
  BID_ON_PLANT
  BUY_RESOURCES
  BUY_CITIES
  POWER_UP
}

enum Color {
  BLUE
  RED
  YELLOW
  GREEN
  PURPLE
  BLACK
}

enum PlantStatus {
  REMOVED_BEFORE_START
  DECK
  MARKET
  DISCARDED
  ERA_THREE
  OWNED
}

enum PlantResourceType {
  COAL
  OIL
  HYBRID
  TRASH
  URANIUM
  WIND
}
