type Query {
  getGame(id: ID!): Game
  fetchMap(mapName: String!, regions: [Int]): PopulatedMap!
  fetchPlants: [Plant!]!
  getRevenues: [Int!]!
  getCurrentUser: User
  getOnlineUsernames: [String!]!
  getMyRecentGames: [GameLink!]
}

type Mutation {
  createGame(usernames: [String!]!, mapName: String!, name: String, regions: [Int]): ID!
  putUpPlant(gameId: ID!, plantId: String, bid: Int): GameState!
  bidOnPlant(gameId: ID!, bid: Int): GameState!
  discardPlant(gameId: ID!, plantId: String!, hybridChoice: HybridChoiceInput): GameState!
  buyResources(gameId: ID!, resources: ResourcesInput!, cost: Int!): GameState!
  buyCities(gameId: ID!, cityIds: [String!]!, cost: Int!): GameState!
  powerUp(gameId: ID!, plantIds: [String!]!, hybridChoice: HybridChoiceInput): GameState!
  undo(gameId: ID!): GameState!
  createUser(username: String!, password: String!, preferredColor: Color, we: Boolean!): User
  login(username: String!, password: String!): LoginResponse!
  setPassword(username: String!, password: String!): User
  keepMeOnline: User
  setUserPreferences(preferredColor: Color, we: Boolean): User!
}

type Subscription {
  gameStateUpdated(gameId: ID!): GameState
}

type User {
  id: ID!
  username: String!
  preferredColor: Color
  we: Boolean!
}

type GameLink {
  id: ID!
  name: String
  players: [String!]!
}

type GameState {
  info: GameStateInfo!
  resourceMarket: Resources!
  playerOrder: [Player!]!
  plantMarket: [String!]!
  era3Plants: [String!]!
  discardedPlants: [String!]!
  possibleDeck: [String!]!
  deckCount: Int!
  cityList: [CityInstance!]!
  auction: Auction
  plantPhaseEvents: [PlantPhaseEvent!]!
}

type GameStateInfo {
  turn: Int!
  era: Int!
  phase: Phase!
  actionType: ActionType!
  activeUser: String!
}

type PlantPhaseEvent {
  plantId: String
  cost: Int
  username: String!
}

type Player {
  clockwiseOrder: Int!
  username: String!
  color: Color!
  money: Int!
  resources: Resources!
  plantIds: [String!]!
}

type Plant {
  id: ID!
  rank: Int!
  resourceType: PlantResourceType!
  resourceBurn: Int!
  numCities: Int!
}

type Resources {
  coal: Int!
  oil: Int!
  trash: Int!
  uranium: Int!
}

type CityInstance {
  cityId: String!
  occupants: [String!]!
}

type Auction {
  plantId: String!
  bid: Int!
  leader: String!
  active: String!
  passed: [String!]
}

type RestockRates {
  era1: Resources!
  era2: Resources!
  era3: Resources!
}

type PopulatedMap {
  id: ID!
  name: String!
  cities: [City!]!
  connections: [Connection!]!
}

type City {
  id: ID!
  name: String!
  lat: Float!
  lng: Float!
  region: Int!
}

type Connection {
  id: ID!
  cost: Int!
  cities: [City!]!
}

type Game {
  id: ID!
  map: PopulatedMap!
  regions: [Int!]!
  restockRates: RestockRates!
  era2Start: Int!
  gameEnd: Int!
  cityCostHelper: String!
  state: GameState
}

input ResourcesInput {
  coal: Int
  oil: Int
  trash: Int
  uranium: Int
}

input HybridChoiceInput {
  coal: Int!
  oil: Int!
}

type LoginResponse {
  token: String
  user: User
}

enum Phase {
  PLANT
  RESOURCE
  CITY
  POWER
}

enum ActionType {
  PUT_UP_PLANT
  DISCARD_PLANT
  BID_ON_PLANT
  BUY_RESOURCES
  BUY_CITIES
  POWER_UP
}

enum Color {
  BLUE
  RED
  YELLOW
  GREEN
  PURPLE
  BLACK
}

enum PlantResourceType {
  COAL
  OIL
  HYBRID
  TRASH
  URANIUM
  WIND
}
